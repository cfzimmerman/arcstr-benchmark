<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="85839"><g><title>arcstr-benchmark`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="0.1980%" y="165" width="0.0151%" height="15" fill="rgb(227,0,7)" fg:x="170" fg:w="13"/><text x="0.4480%" y="175.50"></text></g><g><title>arcstr-benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 0.05%)</title><rect x="0.1980%" y="181" width="0.0454%" height="15" fill="rgb(217,0,24)" fg:x="170" fg:w="39"/><text x="0.4480%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.02%)</title><rect x="0.2190%" y="165" width="0.0245%" height="15" fill="rgb(221,193,54)" fg:x="188" fg:w="21"/><text x="0.4690%" y="175.50"></text></g><g><title>arcstr-benchmark`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (200 samples, 0.23%)</title><rect x="0.0163%" y="197" width="0.2330%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="200"/><text x="0.2663%" y="207.50"></text></g><g><title>arcstr-benchmark`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (201 samples, 0.23%)</title><rect x="0.2493%" y="197" width="0.2342%" height="15" fill="rgb(208,68,35)" fg:x="214" fg:w="201"/><text x="0.4993%" y="207.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::context::with_scheduler (29 samples, 0.03%)</title><rect x="0.4928%" y="149" width="0.0338%" height="15" fill="rgb(232,128,0)" fg:x="423" fg:w="29"/><text x="0.7428%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (18 samples, 0.02%)</title><rect x="0.5056%" y="133" width="0.0210%" height="15" fill="rgb(207,160,47)" fg:x="434" fg:w="18"/><text x="0.7556%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (33 samples, 0.04%)</title><rect x="0.4916%" y="165" width="0.0384%" height="15" fill="rgb(228,23,34)" fg:x="422" fg:w="33"/><text x="0.7416%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1,353 samples, 1.58%)</title><rect x="0.5650%" y="53" width="1.5762%" height="15" fill="rgb(218,30,26)" fg:x="485" fg:w="1353"/><text x="0.8150%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1,200 samples, 1.40%)</title><rect x="2.1424%" y="53" width="1.3980%" height="15" fill="rgb(220,122,19)" fg:x="1839" fg:w="1200"/><text x="2.3924%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1,395 samples, 1.63%)</title><rect x="3.5403%" y="53" width="1.6251%" height="15" fill="rgb(250,228,42)" fg:x="3039" fg:w="1395"/><text x="3.7903%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (205 samples, 0.24%)</title><rect x="4.9267%" y="37" width="0.2388%" height="15" fill="rgb(240,193,28)" fg:x="4229" fg:w="205"/><text x="5.1767%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,964 samples, 4.62%)</title><rect x="0.5487%" y="85" width="4.6179%" height="15" fill="rgb(216,20,37)" fg:x="471" fg:w="3964"/><text x="0.7987%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3,956 samples, 4.61%)</title><rect x="0.5580%" y="69" width="4.6086%" height="15" fill="rgb(206,188,39)" fg:x="479" fg:w="3956"/><text x="0.8080%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1,232 samples, 1.44%)</title><rect x="5.1946%" y="69" width="1.4352%" height="15" fill="rgb(217,207,13)" fg:x="4459" fg:w="1232"/><text x="5.4446%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1,203 samples, 1.40%)</title><rect x="6.6299%" y="69" width="1.4015%" height="15" fill="rgb(231,73,38)" fg:x="5691" fg:w="1203"/><text x="6.8799%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,487 samples, 2.90%)</title><rect x="5.1690%" y="85" width="2.8973%" height="15" fill="rgb(225,20,46)" fg:x="4437" fg:w="2487"/><text x="5.4190%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.03%)</title><rect x="8.0313%" y="69" width="0.0349%" height="15" fill="rgb(210,31,41)" fg:x="6894" fg:w="30"/><text x="8.2813%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (6,470 samples, 7.54%)</title><rect x="0.5359%" y="117" width="7.5374%" height="15" fill="rgb(221,200,47)" fg:x="460" fg:w="6470"/><text x="0.7859%" y="127.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_memalign (6,465 samples, 7.53%)</title><rect x="0.5417%" y="101" width="7.5315%" height="15" fill="rgb(226,26,5)" fg:x="465" fg:w="6465"/><text x="0.7917%" y="111.50">libsystem_..</text></g><g><title>arcstr-benchmark`__rdl_alloc (6,480 samples, 7.55%)</title><rect x="0.5324%" y="149" width="7.5490%" height="15" fill="rgb(249,33,26)" fg:x="457" fg:w="6480"/><text x="0.7824%" y="159.50">arcstr-ben..</text></g><g><title>libsystem_malloc.dylib`posix_memalign (6,478 samples, 7.55%)</title><rect x="0.5347%" y="133" width="7.5467%" height="15" fill="rgb(235,183,28)" fg:x="459" fg:w="6478"/><text x="0.7847%" y="143.50">libsystem_..</text></g><g><title>arcstr-benchmark`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (20 samples, 0.02%)</title><rect x="8.0814%" y="149" width="0.0233%" height="15" fill="rgb(221,5,38)" fg:x="6937" fg:w="20"/><text x="8.3314%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::util::sharded_list::ShardGuard&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push (13 samples, 0.02%)</title><rect x="8.0896%" y="133" width="0.0151%" height="15" fill="rgb(247,18,42)" fg:x="6944" fg:w="13"/><text x="8.3396%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::context::current::with_current (6,542 samples, 7.62%)</title><rect x="0.4846%" y="197" width="7.6212%" height="15" fill="rgb(241,131,45)" fg:x="416" fg:w="6542"/><text x="0.7346%" y="207.50">arcstr-ben..</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::Handle::spawn (6,540 samples, 7.62%)</title><rect x="0.4870%" y="181" width="7.6189%" height="15" fill="rgb(249,31,29)" fg:x="418" fg:w="6540"/><text x="0.7370%" y="191.50">arcstr-ben..</text></g><g><title>arcstr-benchmark`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (6,503 samples, 7.58%)</title><rect x="0.5301%" y="165" width="7.5758%" height="15" fill="rgb(225,111,53)" fg:x="455" fg:w="6503"/><text x="0.7801%" y="175.50">arcstr-ben..</text></g><g><title>arcstr-benchmark`arcstr_benchmark::run_single (6,956 samples, 8.10%)</title><rect x="0.0140%" y="213" width="8.1035%" height="15" fill="rgb(238,160,17)" fg:x="12" fg:w="6956"/><text x="0.2640%" y="223.50">arcstr-benc..</text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.01%)</title><rect x="8.1059%" y="197" width="0.0116%" height="15" fill="rgb(214,148,48)" fg:x="6958" fg:w="10"/><text x="8.3559%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (33 samples, 0.04%)</title><rect x="8.1222%" y="181" width="0.0384%" height="15" fill="rgb(232,36,49)" fg:x="6972" fg:w="33"/><text x="8.3722%" y="191.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::park::Inner::park (37 samples, 0.04%)</title><rect x="8.1187%" y="213" width="0.0431%" height="15" fill="rgb(209,103,24)" fg:x="6969" fg:w="37"/><text x="8.3687%" y="223.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::wait_until_internal (37 samples, 0.04%)</title><rect x="8.1187%" y="197" width="0.0431%" height="15" fill="rgb(229,88,8)" fg:x="6969" fg:w="37"/><text x="8.3687%" y="207.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (54 samples, 0.06%)</title><rect x="8.1641%" y="213" width="0.0629%" height="15" fill="rgb(213,181,19)" fg:x="7008" fg:w="54"/><text x="8.4141%" y="223.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::state::State::unset_join_interested (45 samples, 0.05%)</title><rect x="8.1746%" y="197" width="0.0524%" height="15" fill="rgb(254,191,54)" fg:x="7017" fg:w="45"/><text x="8.4246%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (10 samples, 0.01%)</title><rect x="8.2538%" y="181" width="0.0116%" height="15" fill="rgb(241,83,37)" fg:x="7085" fg:w="10"/><text x="8.5038%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (49 samples, 0.06%)</title><rect x="8.2375%" y="213" width="0.0571%" height="15" fill="rgb(233,36,39)" fg:x="7071" fg:w="49"/><text x="8.4875%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (43 samples, 0.05%)</title><rect x="8.2445%" y="197" width="0.0501%" height="15" fill="rgb(226,3,54)" fg:x="7077" fg:w="43"/><text x="8.4945%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (10 samples, 0.01%)</title><rect x="8.2829%" y="181" width="0.0116%" height="15" fill="rgb(245,192,40)" fg:x="7110" fg:w="10"/><text x="8.5329%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="8.2841%" y="165" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="7111" fg:w="9"/><text x="8.5341%" y="175.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::park::CachedParkThread::block_on (7,119 samples, 8.29%)</title><rect x="0.0047%" y="229" width="8.2934%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="7119"/><text x="0.2547%" y="239.50">arcstr-bench..</text></g><g><title>dyld`start (7,133 samples, 8.31%)</title><rect x="0.0000%" y="357" width="8.3097%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="7133"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>arcstr-benchmark`main (7,133 samples, 8.31%)</title><rect x="0.0000%" y="341" width="8.3097%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="7133"/><text x="0.2500%" y="351.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`std::rt::lang_start_internal (7,133 samples, 8.31%)</title><rect x="0.0000%" y="325" width="8.3097%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="7133"/><text x="0.2500%" y="335.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`std::rt::lang_start::_{{closure}} (7,133 samples, 8.31%)</title><rect x="0.0000%" y="309" width="8.3097%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="7133"/><text x="0.2500%" y="319.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`std::sys_common::backtrace::__rust_begin_short_backtrace (7,133 samples, 8.31%)</title><rect x="0.0000%" y="293" width="8.3097%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="7133"/><text x="0.2500%" y="303.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`arcstr_benchmark::main (7,133 samples, 8.31%)</title><rect x="0.0000%" y="277" width="8.3097%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="7133"/><text x="0.2500%" y="287.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`tokio::runtime::runtime::Runtime::block_on (7,132 samples, 8.31%)</title><rect x="0.0012%" y="261" width="8.3086%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="7132"/><text x="0.2512%" y="271.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`tokio::runtime::context::runtime::enter_runtime (7,132 samples, 8.31%)</title><rect x="0.0012%" y="245" width="8.3086%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="7132"/><text x="0.2512%" y="255.50">arcstr-bench..</text></g><g><title>arcstr-benchmark`parking_lot::raw_mutex::RawMutex::lock_slow (28 samples, 0.03%)</title><rect x="8.4169%" y="181" width="0.0326%" height="15" fill="rgb(239,60,40)" fg:x="7225" fg:w="28"/><text x="8.6669%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (24 samples, 0.03%)</title><rect x="8.4216%" y="165" width="0.0280%" height="15" fill="rgb(206,27,48)" fg:x="7229" fg:w="24"/><text x="8.6716%" y="175.50"></text></g><g><title>arcstr-benchmark`std::sys::pal::unix::time::Timespec::now (10 samples, 0.01%)</title><rect x="8.4507%" y="181" width="0.0116%" height="15" fill="rgb(225,35,8)" fg:x="7254" fg:w="10"/><text x="8.7007%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (10 samples, 0.01%)</title><rect x="8.4507%" y="165" width="0.0116%" height="15" fill="rgb(250,213,24)" fg:x="7254" fg:w="10"/><text x="8.7007%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.01%)</title><rect x="8.4519%" y="149" width="0.0105%" height="15" fill="rgb(247,123,22)" fg:x="7255" fg:w="9"/><text x="8.7019%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (13 samples, 0.02%)</title><rect x="8.4624%" y="181" width="0.0151%" height="15" fill="rgb(231,138,38)" fg:x="7264" fg:w="13"/><text x="8.7124%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (32 samples, 0.04%)</title><rect x="8.4868%" y="133" width="0.0373%" height="15" fill="rgb(231,145,46)" fg:x="7285" fg:w="32"/><text x="8.7368%" y="143.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::wait_until_internal (36 samples, 0.04%)</title><rect x="8.4868%" y="149" width="0.0419%" height="15" fill="rgb(251,118,11)" fg:x="7285" fg:w="36"/><text x="8.7368%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::park::Parker::park (39 samples, 0.05%)</title><rect x="8.4845%" y="165" width="0.0454%" height="15" fill="rgb(217,147,25)" fg:x="7283" fg:w="39"/><text x="8.7345%" y="175.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::io::driver::Driver::turn (73 samples, 0.09%)</title><rect x="8.5369%" y="149" width="0.0850%" height="15" fill="rgb(247,81,37)" fg:x="7328" fg:w="73"/><text x="8.7869%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`kevent (69 samples, 0.08%)</title><rect x="8.5416%" y="133" width="0.0804%" height="15" fill="rgb(209,12,38)" fg:x="7332" fg:w="69"/><text x="8.7916%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::time::Driver::park_internal (80 samples, 0.09%)</title><rect x="8.5299%" y="165" width="0.0932%" height="15" fill="rgb(227,1,9)" fg:x="7322" fg:w="80"/><text x="8.7799%" y="175.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (128 samples, 0.15%)</title><rect x="8.4775%" y="181" width="0.1491%" height="15" fill="rgb(248,47,43)" fg:x="7277" fg:w="128"/><text x="8.7275%" y="191.50"></text></g><g><title>arcstr-benchmark`std::panicking::try (11 samples, 0.01%)</title><rect x="8.6720%" y="149" width="0.0128%" height="15" fill="rgb(221,10,30)" fg:x="7444" fg:w="11"/><text x="8.9220%" y="159.50"></text></g><g><title>arcstr-benchmark`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,965 samples, 2.29%)</title><rect x="8.6895%" y="133" width="2.2892%" height="15" fill="rgb(210,229,1)" fg:x="7459" fg:w="1965"/><text x="8.9395%" y="143.50">a..</text></g><g><title>arcstr-benchmark`DYLD-STUB$$free (1,932 samples, 2.25%)</title><rect x="10.9822%" y="133" width="2.2507%" height="15" fill="rgb(222,148,37)" fg:x="9427" fg:w="1932"/><text x="11.2322%" y="143.50">a..</text></g><g><title>arcstr-benchmark`DYLD-STUB$$memcmp (632 samples, 0.74%)</title><rect x="13.2329%" y="133" width="0.7363%" height="15" fill="rgb(234,67,33)" fg:x="11359" fg:w="632"/><text x="13.4829%" y="143.50"></text></g><g><title>arcstr-benchmark`__rust_dealloc (29 samples, 0.03%)</title><rect x="13.9727%" y="133" width="0.0338%" height="15" fill="rgb(247,98,35)" fg:x="11994" fg:w="29"/><text x="14.2227%" y="143.50"></text></g><g><title>arcstr-benchmark`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,457 samples, 2.86%)</title><rect x="17.7891%" y="117" width="2.8623%" height="15" fill="rgb(247,138,52)" fg:x="15270" fg:w="2457"/><text x="18.0391%" y="127.50">ar..</text></g><g><title>arcstr-benchmark`DYLD-STUB$$malloc (1,425 samples, 1.66%)</title><rect x="20.6515%" y="117" width="1.6601%" height="15" fill="rgb(213,79,30)" fg:x="17727" fg:w="1425"/><text x="20.9015%" y="127.50"></text></g><g><title>arcstr-benchmark`DYLD-STUB$$memcpy (668 samples, 0.78%)</title><rect x="22.3115%" y="117" width="0.7782%" height="15" fill="rgb(246,177,23)" fg:x="19152" fg:w="668"/><text x="22.5615%" y="127.50"></text></g><g><title>arcstr-benchmark`__rdl_alloc (780 samples, 0.91%)</title><rect x="23.0897%" y="117" width="0.9087%" height="15" fill="rgb(230,62,27)" fg:x="19820" fg:w="780"/><text x="23.3397%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (678 samples, 0.79%)</title><rect x="24.0042%" y="117" width="0.7899%" height="15" fill="rgb(216,154,8)" fg:x="20605" fg:w="678"/><text x="24.2542%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5,740 samples, 6.69%)</title><rect x="24.7941%" y="117" width="6.6869%" height="15" fill="rgb(244,35,45)" fg:x="21283" fg:w="5740"/><text x="25.0441%" y="127.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17,613 samples, 20.52%)</title><rect x="31.4810%" y="117" width="20.5186%" height="15" fill="rgb(251,115,12)" fg:x="27023" fg:w="17613"/><text x="31.7310%" y="127.50">libsystem_malloc.dylib`_nanov2_f..</text></g><g><title>libsystem_malloc.dylib`malloc (133 samples, 0.15%)</title><rect x="51.9997%" y="117" width="0.1549%" height="15" fill="rgb(240,54,50)" fg:x="44636" fg:w="133"/><text x="52.2497%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15,154 samples, 17.65%)</title><rect x="52.1558%" y="117" width="17.6540%" height="15" fill="rgb(233,84,52)" fg:x="44770" fg:w="15154"/><text x="52.4058%" y="127.50">libsystem_malloc.dylib`nano..</text></g><g><title>libsystem_platform.dylib`__bzero (673 samples, 0.78%)</title><rect x="69.8098%" y="117" width="0.7840%" height="15" fill="rgb(207,117,47)" fg:x="59924" fg:w="673"/><text x="70.0598%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5,101 samples, 5.94%)</title><rect x="70.5938%" y="117" width="5.9425%" height="15" fill="rgb(249,43,39)" fg:x="60597" fg:w="5101"/><text x="70.8438%" y="127.50">libsyste..</text></g><g><title>arcstr-benchmark`arcstr_benchmark::task::_{{closure}} (55,842 samples, 65.05%)</title><rect x="14.0065%" y="133" width="65.0543%" height="15" fill="rgb(209,38,44)" fg:x="12023" fg:w="55842"/><text x="14.2565%" y="143.50">arcstr-benchmark`arcstr_benchmark::task::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,167 samples, 2.52%)</title><rect x="76.5363%" y="117" width="2.5245%" height="15" fill="rgb(236,212,23)" fg:x="65698" fg:w="2167"/><text x="76.7863%" y="127.50">li..</text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.04%)</title><rect x="79.0631%" y="133" width="0.0408%" height="15" fill="rgb(242,79,21)" fg:x="67867" fg:w="35"/><text x="79.3131%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,336 samples, 1.56%)</title><rect x="79.1039%" y="133" width="1.5564%" height="15" fill="rgb(211,96,35)" fg:x="67902" fg:w="1336"/><text x="79.3539%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7,290 samples, 8.49%)</title><rect x="80.6603%" y="133" width="8.4926%" height="15" fill="rgb(253,215,40)" fg:x="69238" fg:w="7290"/><text x="80.9103%" y="143.50">libsystem_ma..</text></g><g><title>arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (78,063 samples, 90.94%)</title><rect x="8.6872%" y="149" width="90.9412%" height="15" fill="rgb(211,81,21)" fg:x="7457" fg:w="78063"/><text x="8.9372%" y="159.50">arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8,992 samples, 10.48%)</title><rect x="89.1529%" y="133" width="10.4754%" height="15" fill="rgb(208,190,38)" fg:x="76528" fg:w="8992"/><text x="89.4029%" y="143.50">libsystem_platf..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (21 samples, 0.02%)</title><rect x="99.6377%" y="101" width="0.0245%" height="15" fill="rgb(235,213,38)" fg:x="85528" fg:w="21"/><text x="99.8877%" y="111.50"></text></g><g><title>arcstr-benchmark`std::panicking::try (26 samples, 0.03%)</title><rect x="99.6342%" y="133" width="0.0303%" height="15" fill="rgb(237,122,38)" fg:x="85525" fg:w="26"/><text x="99.8842%" y="143.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::notify_one_slow (26 samples, 0.03%)</title><rect x="99.6342%" y="117" width="0.0303%" height="15" fill="rgb(244,218,35)" fg:x="85525" fg:w="26"/><text x="99.8842%" y="127.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (55 samples, 0.06%)</title><rect x="99.6645%" y="133" width="0.0641%" height="15" fill="rgb(240,68,47)" fg:x="85551" fg:w="55"/><text x="99.9145%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::state::State::transition_to_terminal (16 samples, 0.02%)</title><rect x="99.7286%" y="133" width="0.0186%" height="15" fill="rgb(210,16,53)" fg:x="85606" fg:w="16"/><text x="99.9786%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (193 samples, 0.22%)</title><rect x="99.6295%" y="149" width="0.2248%" height="15" fill="rgb(235,124,12)" fg:x="85521" fg:w="193"/><text x="99.8795%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (92 samples, 0.11%)</title><rect x="99.7472%" y="133" width="0.1072%" height="15" fill="rgb(224,169,11)" fg:x="85622" fg:w="92"/><text x="99.9972%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::state::State::transition_to_running (13 samples, 0.02%)</title><rect x="99.8544%" y="149" width="0.0151%" height="15" fill="rgb(250,166,2)" fg:x="85714" fg:w="13"/><text x="100.1044%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (78,287 samples, 91.20%)</title><rect x="8.6697%" y="165" width="91.2021%" height="15" fill="rgb(242,216,29)" fg:x="7442" fg:w="78287"/><text x="8.9197%" y="175.50">arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (78,325 samples, 91.25%)</title><rect x="8.6266%" y="181" width="91.2464%" height="15" fill="rgb(230,116,27)" fg:x="7405" fg:w="78325"/><text x="8.8766%" y="191.50">arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run (78,626 samples, 91.60%)</title><rect x="8.3144%" y="197" width="91.5971%" height="15" fill="rgb(228,99,48)" fg:x="7137" fg:w="78626"/><text x="8.5644%" y="207.50">arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.03%)</title><rect x="99.8777%" y="181" width="0.0338%" height="15" fill="rgb(253,11,6)" fg:x="85734" fg:w="29"/><text x="100.1277%" y="191.50"></text></g><g><title>arcstr-benchmark`core::ops::function::FnOnce::call_once{{vtable.shim}} (78,703 samples, 91.69%)</title><rect x="8.3121%" y="309" width="91.6868%" height="15" fill="rgb(247,143,39)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="319.50">arcstr-benchmark`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>arcstr-benchmark`std::sys_common::backtrace::__rust_begin_short_backtrace (78,703 samples, 91.69%)</title><rect x="8.3121%" y="293" width="91.6868%" height="15" fill="rgb(236,97,10)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="303.50">arcstr-benchmark`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>arcstr-benchmark`tokio::runtime::blocking::pool::Inner::run (78,703 samples, 91.69%)</title><rect x="8.3121%" y="277" width="91.6868%" height="15" fill="rgb(233,208,19)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="287.50">arcstr-benchmark`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (78,703 samples, 91.69%)</title><rect x="8.3121%" y="261" width="91.6868%" height="15" fill="rgb(216,164,2)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="271.50">arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (78,703 samples, 91.69%)</title><rect x="8.3121%" y="245" width="91.6868%" height="15" fill="rgb(220,129,5)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="255.50">arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::run (78,703 samples, 91.69%)</title><rect x="8.3121%" y="229" width="91.6868%" height="15" fill="rgb(242,17,10)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="239.50">arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>arcstr-benchmark`tokio::runtime::context::runtime::enter_runtime (78,703 samples, 91.69%)</title><rect x="8.3121%" y="213" width="91.6868%" height="15" fill="rgb(242,107,0)" fg:x="7135" fg:w="78703"/><text x="8.5621%" y="223.50">arcstr-benchmark`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (75 samples, 0.09%)</title><rect x="99.9115%" y="197" width="0.0874%" height="15" fill="rgb(251,28,31)" fg:x="85763" fg:w="75"/><text x="100.1615%" y="207.50"></text></g><g><title>all (85,839 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="85839"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (78,704 samples, 91.69%)</title><rect x="8.3121%" y="357" width="91.6879%" height="15" fill="rgb(215,21,27)" fg:x="7135" fg:w="78704"/><text x="8.5621%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (78,704 samples, 91.69%)</title><rect x="8.3121%" y="341" width="91.6879%" height="15" fill="rgb(232,23,21)" fg:x="7135" fg:w="78704"/><text x="8.5621%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>arcstr-benchmark`std::sys::pal::unix::thread::Thread::new::thread_start (78,704 samples, 91.69%)</title><rect x="8.3121%" y="325" width="91.6879%" height="15" fill="rgb(244,5,23)" fg:x="7135" fg:w="78704"/><text x="8.5621%" y="335.50">arcstr-benchmark`std::sys::pal::unix::thread::Thread::new::thread_start</text></g></svg></svg>
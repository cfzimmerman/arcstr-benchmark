<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="66232"><g><title>arcstr-benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.04%)</title><rect x="0.1178%" y="181" width="0.0423%" height="15" fill="rgb(227,0,7)" fg:x="78" fg:w="28"/><text x="0.3678%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="0.1329%" y="165" width="0.0272%" height="15" fill="rgb(217,0,24)" fg:x="88" fg:w="18"/><text x="0.3829%" y="175.50"></text></g><g><title>arcstr-benchmark`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (92 samples, 0.14%)</title><rect x="0.0226%" y="197" width="0.1389%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="92"/><text x="0.2726%" y="207.50"></text></g><g><title>arcstr-benchmark`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (76 samples, 0.11%)</title><rect x="0.1616%" y="197" width="0.1147%" height="15" fill="rgb(248,212,6)" fg:x="107" fg:w="76"/><text x="0.4116%" y="207.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::notify_one_slow (24 samples, 0.04%)</title><rect x="0.3110%" y="133" width="0.0362%" height="15" fill="rgb(208,68,35)" fg:x="206" fg:w="24"/><text x="0.5610%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (19 samples, 0.03%)</title><rect x="0.3186%" y="117" width="0.0287%" height="15" fill="rgb(232,128,0)" fg:x="211" fg:w="19"/><text x="0.5686%" y="127.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::context::with_scheduler (51 samples, 0.08%)</title><rect x="0.3065%" y="149" width="0.0770%" height="15" fill="rgb(207,160,47)" fg:x="203" fg:w="51"/><text x="0.5565%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (22 samples, 0.03%)</title><rect x="0.3503%" y="133" width="0.0332%" height="15" fill="rgb(228,23,34)" fg:x="232" fg:w="22"/><text x="0.6003%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (56 samples, 0.08%)</title><rect x="0.3035%" y="165" width="0.0846%" height="15" fill="rgb(218,30,26)" fg:x="201" fg:w="56"/><text x="0.5535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1,377 samples, 2.08%)</title><rect x="0.4711%" y="53" width="2.0791%" height="15" fill="rgb(220,122,19)" fg:x="312" fg:w="1377"/><text x="0.7211%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1,463 samples, 2.21%)</title><rect x="2.5562%" y="53" width="2.2089%" height="15" fill="rgb(250,228,42)" fg:x="1693" fg:w="1463"/><text x="2.8062%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1,530 samples, 2.31%)</title><rect x="4.7651%" y="53" width="2.3101%" height="15" fill="rgb(240,193,28)" fg:x="3156" fg:w="1530"/><text x="5.0151%" y="63.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (159 samples, 0.24%)</title><rect x="6.8351%" y="37" width="0.2401%" height="15" fill="rgb(216,20,37)" fg:x="4527" fg:w="159"/><text x="7.0851%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4,401 samples, 6.64%)</title><rect x="0.4318%" y="85" width="6.6448%" height="15" fill="rgb(206,188,39)" fg:x="286" fg:w="4401"/><text x="0.6818%" y="95.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4,388 samples, 6.63%)</title><rect x="0.4514%" y="69" width="6.6252%" height="15" fill="rgb(217,207,13)" fg:x="299" fg:w="4388"/><text x="0.7014%" y="79.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1,352 samples, 2.04%)</title><rect x="7.1008%" y="69" width="2.0413%" height="15" fill="rgb(231,73,38)" fg:x="4703" fg:w="1352"/><text x="7.3508%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1,342 samples, 2.03%)</title><rect x="9.1421%" y="69" width="2.0262%" height="15" fill="rgb(225,20,46)" fg:x="6055" fg:w="1342"/><text x="9.3921%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,736 samples, 4.13%)</title><rect x="7.0781%" y="85" width="4.1309%" height="15" fill="rgb(210,31,41)" fg:x="4688" fg:w="2736"/><text x="7.3281%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.04%)</title><rect x="11.1683%" y="69" width="0.0408%" height="15" fill="rgb(221,200,47)" fg:x="7397" fg:w="27"/><text x="11.4183%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (7,174 samples, 10.83%)</title><rect x="0.3941%" y="117" width="10.8316%" height="15" fill="rgb(226,26,5)" fg:x="261" fg:w="7174"/><text x="0.6441%" y="127.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`tiny_memalign (7,165 samples, 10.82%)</title><rect x="0.4077%" y="101" width="10.8180%" height="15" fill="rgb(249,33,26)" fg:x="270" fg:w="7165"/><text x="0.6577%" y="111.50">libsystem_malloc..</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="11.2091%" y="85" width="0.0166%" height="15" fill="rgb(235,183,28)" fg:x="7424" fg:w="11"/><text x="11.4591%" y="95.50"></text></g><g><title>arcstr-benchmark`__rdl_alloc (7,179 samples, 10.84%)</title><rect x="0.3910%" y="149" width="10.8392%" height="15" fill="rgb(221,5,38)" fg:x="259" fg:w="7179"/><text x="0.6410%" y="159.50">arcstr-benchmark..</text></g><g><title>libsystem_malloc.dylib`posix_memalign (7,177 samples, 10.84%)</title><rect x="0.3941%" y="133" width="10.8362%" height="15" fill="rgb(247,18,42)" fg:x="261" fg:w="7177"/><text x="0.6441%" y="143.50">libsystem_malloc..</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::Handle::spawn (7,272 samples, 10.98%)</title><rect x="0.2944%" y="181" width="10.9796%" height="15" fill="rgb(241,131,45)" fg:x="195" fg:w="7272"/><text x="0.5444%" y="191.50">arcstr-benchmark..</text></g><g><title>arcstr-benchmark`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (7,210 samples, 10.89%)</title><rect x="0.3880%" y="165" width="10.8860%" height="15" fill="rgb(249,31,29)" fg:x="257" fg:w="7210"/><text x="0.6380%" y="175.50">arcstr-benchmark..</text></g><g><title>arcstr-benchmark`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (29 samples, 0.04%)</title><rect x="11.2302%" y="149" width="0.0438%" height="15" fill="rgb(225,111,53)" fg:x="7438" fg:w="29"/><text x="11.4802%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::util::sharded_list::ShardGuard&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push (14 samples, 0.02%)</title><rect x="11.2529%" y="133" width="0.0211%" height="15" fill="rgb(238,160,17)" fg:x="7453" fg:w="14"/><text x="11.5029%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::context::current::with_current (7,285 samples, 11.00%)</title><rect x="0.2763%" y="197" width="10.9992%" height="15" fill="rgb(214,148,48)" fg:x="183" fg:w="7285"/><text x="0.5263%" y="207.50">arcstr-benchmark..</text></g><g><title>arcstr-benchmark`arcstr_benchmark::run_single (7,465 samples, 11.27%)</title><rect x="0.0196%" y="213" width="11.2710%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="7465"/><text x="0.2696%" y="223.50">arcstr-benchmark`..</text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.01%)</title><rect x="11.2785%" y="197" width="0.0121%" height="15" fill="rgb(209,103,24)" fg:x="7470" fg:w="8"/><text x="11.5285%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (22 samples, 0.03%)</title><rect x="11.2936%" y="181" width="0.0332%" height="15" fill="rgb(229,88,8)" fg:x="7480" fg:w="22"/><text x="11.5436%" y="191.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::park::Inner::park (23 samples, 0.03%)</title><rect x="11.2936%" y="213" width="0.0347%" height="15" fill="rgb(213,181,19)" fg:x="7480" fg:w="23"/><text x="11.5436%" y="223.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::wait_until_internal (23 samples, 0.03%)</title><rect x="11.2936%" y="197" width="0.0347%" height="15" fill="rgb(254,191,54)" fg:x="7480" fg:w="23"/><text x="11.5436%" y="207.50"></text></g><g><title>arcstr-benchmark`std::panicking::try (10 samples, 0.02%)</title><rect x="11.3314%" y="197" width="0.0151%" height="15" fill="rgb(241,83,37)" fg:x="7505" fg:w="10"/><text x="11.5814%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.01%)</title><rect x="11.3329%" y="181" width="0.0136%" height="15" fill="rgb(233,36,39)" fg:x="7506" fg:w="9"/><text x="11.5829%" y="191.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (37 samples, 0.06%)</title><rect x="11.3299%" y="213" width="0.0559%" height="15" fill="rgb(226,3,54)" fg:x="7504" fg:w="37"/><text x="11.5799%" y="223.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::state::State::unset_join_interested (26 samples, 0.04%)</title><rect x="11.3465%" y="197" width="0.0393%" height="15" fill="rgb(245,192,40)" fg:x="7515" fg:w="26"/><text x="11.5965%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="11.3978%" y="213" width="0.0106%" height="15" fill="rgb(238,167,29)" fg:x="7549" fg:w="7"/><text x="11.6478%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (10 samples, 0.02%)</title><rect x="11.4325%" y="181" width="0.0151%" height="15" fill="rgb(232,182,51)" fg:x="7572" fg:w="10"/><text x="11.6825%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="11.4371%" y="165" width="0.0106%" height="15" fill="rgb(231,60,39)" fg:x="7575" fg:w="7"/><text x="11.6871%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (8 samples, 0.01%)</title><rect x="11.4627%" y="181" width="0.0121%" height="15" fill="rgb(208,69,12)" fg:x="7592" fg:w="8"/><text x="11.7127%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (58 samples, 0.09%)</title><rect x="11.4099%" y="213" width="0.0876%" height="15" fill="rgb(235,93,37)" fg:x="7557" fg:w="58"/><text x="11.6599%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (52 samples, 0.08%)</title><rect x="11.4190%" y="197" width="0.0785%" height="15" fill="rgb(213,116,39)" fg:x="7563" fg:w="52"/><text x="11.6690%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (9 samples, 0.01%)</title><rect x="11.4839%" y="181" width="0.0136%" height="15" fill="rgb(222,207,29)" fg:x="7606" fg:w="9"/><text x="11.7339%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="11.4854%" y="165" width="0.0121%" height="15" fill="rgb(206,96,30)" fg:x="7607" fg:w="8"/><text x="11.7354%" y="175.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::park::CachedParkThread::block_on (7,613 samples, 11.49%)</title><rect x="0.0060%" y="229" width="11.4944%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="7613"/><text x="0.2560%" y="239.50">arcstr-benchmark`..</text></g><g><title>dyld`start (7,627 samples, 11.52%)</title><rect x="0.0000%" y="357" width="11.5156%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="7627"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>arcstr-benchmark`main (7,627 samples, 11.52%)</title><rect x="0.0000%" y="341" width="11.5156%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="7627"/><text x="0.2500%" y="351.50">arcstr-benchmark`..</text></g><g><title>arcstr-benchmark`std::rt::lang_start_internal (7,627 samples, 11.52%)</title><rect x="0.0000%" y="325" width="11.5156%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="7627"/><text x="0.2500%" y="335.50">arcstr-benchmark`..</text></g><g><title>arcstr-benchmark`std::rt::lang_start::_{{closure}} (7,627 samples, 11.52%)</title><rect x="0.0000%" y="309" width="11.5156%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="7627"/><text x="0.2500%" y="319.50">arcstr-benchmark`..</text></g><g><title>arcstr-benchmark`std::sys_common::backtrace::__rust_begin_short_backtrace (7,627 samples, 11.52%)</title><rect x="0.0000%" y="293" width="11.5156%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="7627"/><text x="0.2500%" y="303.50">arcstr-benchmark`..</text></g><g><title>arcstr-benchmark`arcstr_benchmark::main (7,627 samples, 11.52%)</title><rect x="0.0000%" y="277" width="11.5156%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="7627"/><text x="0.2500%" y="287.50">arcstr-benchmark`..</text></g><g><title>arcstr-benchmark`tokio::runtime::runtime::Runtime::block_on (7,626 samples, 11.51%)</title><rect x="0.0015%" y="261" width="11.5141%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="7626"/><text x="0.2515%" y="271.50">arcstr-benchmark`..</text></g><g><title>arcstr-benchmark`tokio::runtime::context::runtime::enter_runtime (7,626 samples, 11.51%)</title><rect x="0.0015%" y="245" width="11.5141%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="7626"/><text x="0.2515%" y="255.50">arcstr-benchmark`..</text></g><g><title>libsystem_kernel.dylib`swtch_pri (11 samples, 0.02%)</title><rect x="11.6167%" y="165" width="0.0166%" height="15" fill="rgb(251,118,11)" fg:x="7694" fg:w="11"/><text x="11.8667%" y="175.50"></text></g><g><title>arcstr-benchmark`parking_lot::raw_mutex::RawMutex::lock_slow (19 samples, 0.03%)</title><rect x="11.6062%" y="181" width="0.0287%" height="15" fill="rgb(217,147,25)" fg:x="7687" fg:w="19"/><text x="11.8562%" y="191.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (20 samples, 0.03%)</title><rect x="11.6424%" y="181" width="0.0302%" height="15" fill="rgb(247,81,37)" fg:x="7711" fg:w="20"/><text x="11.8924%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (74 samples, 0.11%)</title><rect x="11.6877%" y="133" width="0.1117%" height="15" fill="rgb(209,12,38)" fg:x="7741" fg:w="74"/><text x="11.9377%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::park::Parker::park (83 samples, 0.13%)</title><rect x="11.6786%" y="165" width="0.1253%" height="15" fill="rgb(227,1,9)" fg:x="7735" fg:w="83"/><text x="11.9286%" y="175.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::wait_until_internal (77 samples, 0.12%)</title><rect x="11.6877%" y="149" width="0.1163%" height="15" fill="rgb(248,47,43)" fg:x="7741" fg:w="77"/><text x="11.9377%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (152 samples, 0.23%)</title><rect x="11.6771%" y="181" width="0.2295%" height="15" fill="rgb(221,10,30)" fg:x="7734" fg:w="152"/><text x="11.9271%" y="191.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::time::Driver::park_internal (67 samples, 0.10%)</title><rect x="11.8055%" y="165" width="0.1012%" height="15" fill="rgb(210,229,1)" fg:x="7819" fg:w="67"/><text x="12.0555%" y="175.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::io::driver::Driver::turn (63 samples, 0.10%)</title><rect x="11.8115%" y="149" width="0.0951%" height="15" fill="rgb(222,148,37)" fg:x="7823" fg:w="63"/><text x="12.0615%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`kevent (61 samples, 0.09%)</title><rect x="11.8145%" y="133" width="0.0921%" height="15" fill="rgb(234,67,33)" fg:x="7825" fg:w="61"/><text x="12.0645%" y="143.50"></text></g><g><title>arcstr-benchmark`std::panicking::try (11 samples, 0.02%)</title><rect x="11.9912%" y="149" width="0.0166%" height="15" fill="rgb(247,98,35)" fg:x="7942" fg:w="11"/><text x="12.2412%" y="159.50"></text></g><g><title>arcstr-benchmark`&lt;alloc::string::String as core::clone::Clone&gt;::clone (947 samples, 1.43%)</title><rect x="12.0108%" y="133" width="1.4298%" height="15" fill="rgb(247,138,52)" fg:x="7955" fg:w="947"/><text x="12.2608%" y="143.50"></text></g><g><title>arcstr-benchmark`DYLD-STUB$$free (1,684 samples, 2.54%)</title><rect x="13.4421%" y="133" width="2.5426%" height="15" fill="rgb(213,79,30)" fg:x="8903" fg:w="1684"/><text x="13.6921%" y="143.50">ar..</text></g><g><title>arcstr-benchmark`DYLD-STUB$$memcmp (657 samples, 0.99%)</title><rect x="15.9847%" y="133" width="0.9920%" height="15" fill="rgb(246,177,23)" fg:x="10587" fg:w="657"/><text x="16.2347%" y="143.50"></text></g><g><title>arcstr-benchmark`__rdl_dealloc (17 samples, 0.03%)</title><rect x="16.9767%" y="133" width="0.0257%" height="15" fill="rgb(230,62,27)" fg:x="11244" fg:w="17"/><text x="17.2267%" y="143.50"></text></g><g><title>arcstr-benchmark`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,797 samples, 2.71%)</title><rect x="21.9411%" y="117" width="2.7132%" height="15" fill="rgb(216,154,8)" fg:x="14532" fg:w="1797"/><text x="22.1911%" y="127.50">ar..</text></g><g><title>arcstr-benchmark`DYLD-STUB$$malloc (806 samples, 1.22%)</title><rect x="24.6542%" y="117" width="1.2169%" height="15" fill="rgb(244,35,45)" fg:x="16329" fg:w="806"/><text x="24.9042%" y="127.50"></text></g><g><title>arcstr-benchmark`DYLD-STUB$$memcpy (627 samples, 0.95%)</title><rect x="25.8712%" y="117" width="0.9467%" height="15" fill="rgb(251,115,12)" fg:x="17135" fg:w="627"/><text x="26.1212%" y="127.50"></text></g><g><title>arcstr-benchmark`__rdl_alloc (789 samples, 1.19%)</title><rect x="26.8179%" y="117" width="1.1913%" height="15" fill="rgb(240,54,50)" fg:x="17762" fg:w="789"/><text x="27.0679%" y="127.50"></text></g><g><title>arcstr-benchmark`__rust_alloc (27 samples, 0.04%)</title><rect x="28.0091%" y="117" width="0.0408%" height="15" fill="rgb(233,84,52)" fg:x="18551" fg:w="27"/><text x="28.2591%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5,596 samples, 8.45%)</title><rect x="28.0499%" y="117" width="8.4491%" height="15" fill="rgb(207,117,47)" fg:x="18578" fg:w="5596"/><text x="28.2999%" y="127.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11,538 samples, 17.42%)</title><rect x="36.4990%" y="117" width="17.4206%" height="15" fill="rgb(249,43,39)" fg:x="24174" fg:w="11538"/><text x="36.7490%" y="127.50">libsystem_malloc.dylib`_nan..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9,235 samples, 13.94%)</title><rect x="53.9301%" y="117" width="13.9434%" height="15" fill="rgb(209,38,44)" fg:x="35719" fg:w="9235"/><text x="54.1801%" y="127.50">libsystem_malloc.dyli..</text></g><g><title>arcstr-benchmark`arcstr_benchmark::task::_{{closure}} (35,783 samples, 54.03%)</title><rect x="17.0114%" y="133" width="54.0268%" height="15" fill="rgb(236,212,23)" fg:x="11267" fg:w="35783"/><text x="17.2614%" y="143.50">arcstr-benchmark`arcstr_benchmark::task::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,096 samples, 3.16%)</title><rect x="67.8735%" y="117" width="3.1646%" height="15" fill="rgb(242,79,21)" fg:x="44954" fg:w="2096"/><text x="68.1235%" y="127.50">lib..</text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.05%)</title><rect x="71.0427%" y="133" width="0.0468%" height="15" fill="rgb(211,96,35)" fg:x="47053" fg:w="31"/><text x="71.2927%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,479 samples, 2.23%)</title><rect x="71.0895%" y="133" width="2.2331%" height="15" fill="rgb(253,215,40)" fg:x="47084" fg:w="1479"/><text x="71.3395%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`free (8,251 samples, 12.46%)</title><rect x="73.3226%" y="133" width="12.4577%" height="15" fill="rgb(211,81,21)" fg:x="48563" fg:w="8251"/><text x="73.5726%" y="143.50">libsystem_malloc.dy..</text></g><g><title>arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (58,028 samples, 87.61%)</title><rect x="12.0078%" y="149" width="87.6132%" height="15" fill="rgb(208,190,38)" fg:x="7953" fg:w="58028"/><text x="12.2578%" y="159.50">arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9,166 samples, 13.84%)</title><rect x="85.7818%" y="133" width="13.8392%" height="15" fill="rgb(235,213,38)" fg:x="56815" fg:w="9166"/><text x="86.0318%" y="143.50">libsystem_platform.dy..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (12 samples, 0.02%)</title><rect x="99.6271%" y="101" width="0.0181%" height="15" fill="rgb(237,122,38)" fg:x="65985" fg:w="12"/><text x="99.8771%" y="111.50"></text></g><g><title>arcstr-benchmark`std::panicking::try (15 samples, 0.02%)</title><rect x="99.6256%" y="133" width="0.0226%" height="15" fill="rgb(244,218,35)" fg:x="65984" fg:w="15"/><text x="99.8756%" y="143.50"></text></g><g><title>arcstr-benchmark`parking_lot::condvar::Condvar::notify_one_slow (14 samples, 0.02%)</title><rect x="99.6271%" y="117" width="0.0211%" height="15" fill="rgb(240,68,47)" fg:x="65985" fg:w="14"/><text x="99.8771%" y="127.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (28 samples, 0.04%)</title><rect x="99.6482%" y="133" width="0.0423%" height="15" fill="rgb(210,16,53)" fg:x="65999" fg:w="28"/><text x="99.8982%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (125 samples, 0.19%)</title><rect x="99.6240%" y="149" width="0.1887%" height="15" fill="rgb(235,124,12)" fg:x="65983" fg:w="125"/><text x="99.8740%" y="159.50"></text></g><g><title>arcstr-benchmark`tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (78 samples, 0.12%)</title><rect x="99.6950%" y="133" width="0.1178%" height="15" fill="rgb(224,169,11)" fg:x="66030" fg:w="78"/><text x="99.9450%" y="143.50"></text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (58,229 samples, 87.92%)</title><rect x="11.9066%" y="181" width="87.9167%" height="15" fill="rgb(250,166,2)" fg:x="7886" fg:w="58229"/><text x="12.1566%" y="191.50">arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (58,175 samples, 87.84%)</title><rect x="11.9882%" y="165" width="87.8352%" height="15" fill="rgb(242,216,29)" fg:x="7940" fg:w="58175"/><text x="12.2382%" y="175.50">arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run (58,530 samples, 88.37%)</title><rect x="11.5216%" y="197" width="88.3712%" height="15" fill="rgb(230,116,27)" fg:x="7631" fg:w="58530"/><text x="11.7716%" y="207.50">arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>libdyld.dylib`tlv_get_addr (41 samples, 0.06%)</title><rect x="99.8309%" y="181" width="0.0619%" height="15" fill="rgb(228,99,48)" fg:x="66120" fg:w="41"/><text x="100.0809%" y="191.50"></text></g><g><title>all (66,232 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="66232"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (58,605 samples, 88.48%)</title><rect x="11.5156%" y="357" width="88.4844%" height="15" fill="rgb(247,143,39)" fg:x="7627" fg:w="58605"/><text x="11.7656%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (58,605 samples, 88.48%)</title><rect x="11.5156%" y="341" width="88.4844%" height="15" fill="rgb(236,97,10)" fg:x="7627" fg:w="58605"/><text x="11.7656%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>arcstr-benchmark`std::sys::pal::unix::thread::Thread::new::thread_start (58,605 samples, 88.48%)</title><rect x="11.5156%" y="325" width="88.4844%" height="15" fill="rgb(233,208,19)" fg:x="7627" fg:w="58605"/><text x="11.7656%" y="335.50">arcstr-benchmark`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>arcstr-benchmark`core::ops::function::FnOnce::call_once{{vtable.shim}} (58,605 samples, 88.48%)</title><rect x="11.5156%" y="309" width="88.4844%" height="15" fill="rgb(216,164,2)" fg:x="7627" fg:w="58605"/><text x="11.7656%" y="319.50">arcstr-benchmark`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>arcstr-benchmark`std::sys_common::backtrace::__rust_begin_short_backtrace (58,605 samples, 88.48%)</title><rect x="11.5156%" y="293" width="88.4844%" height="15" fill="rgb(220,129,5)" fg:x="7627" fg:w="58605"/><text x="11.7656%" y="303.50">arcstr-benchmark`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>arcstr-benchmark`tokio::runtime::blocking::pool::Inner::run (58,605 samples, 88.48%)</title><rect x="11.5156%" y="277" width="88.4844%" height="15" fill="rgb(242,17,10)" fg:x="7627" fg:w="58605"/><text x="11.7656%" y="287.50">arcstr-benchmark`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (58,602 samples, 88.48%)</title><rect x="11.5201%" y="261" width="88.4799%" height="15" fill="rgb(242,107,0)" fg:x="7630" fg:w="58602"/><text x="11.7701%" y="271.50">arcstr-benchmark`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (58,602 samples, 88.48%)</title><rect x="11.5201%" y="245" width="88.4799%" height="15" fill="rgb(251,28,31)" fg:x="7630" fg:w="58602"/><text x="11.7701%" y="255.50">arcstr-benchmark`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::run (58,602 samples, 88.48%)</title><rect x="11.5201%" y="229" width="88.4799%" height="15" fill="rgb(233,223,10)" fg:x="7630" fg:w="58602"/><text x="11.7701%" y="239.50">arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>arcstr-benchmark`tokio::runtime::context::runtime::enter_runtime (58,602 samples, 88.48%)</title><rect x="11.5201%" y="213" width="88.4799%" height="15" fill="rgb(215,21,27)" fg:x="7630" fg:w="58602"/><text x="11.7701%" y="223.50">arcstr-benchmark`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>arcstr-benchmark`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (71 samples, 0.11%)</title><rect x="99.8928%" y="197" width="0.1072%" height="15" fill="rgb(232,23,21)" fg:x="66161" fg:w="71"/><text x="100.1428%" y="207.50"></text></g></svg></svg>